{"meta":{"title":"Eagune's Blog","subtitle":"","description":"","author":"Eagune","url":"https://eagune.github.io","root":"/"},"pages":[],"posts":[{"title":"各种代码手写","slug":"各种代码","date":"2020-04-30T13:00:22.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/30/各种代码/","link":"","permalink":"https://eagune.github.io/2020/04/30/%E5%90%84%E7%A7%8D%E4%BB%A3%E7%A0%81/","excerpt":"","text":"LazyMan flat 并发数限制","categories":[],"tags":[]},{"title":"（五）声明式地DOM绑定","slug":"vue深入理解/声明式地DOM绑定","date":"2020-04-28T11:03:50.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/28/vue深入理解/声明式地DOM绑定/","link":"","permalink":"https://eagune.github.io/2020/04/28/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%9C%B0DOM%E7%BB%91%E5%AE%9A/","excerpt":"","text":"模板在前面的章节中我们已经知道了通过对数据进行劫持的方式可以让我们以这种通过数据驱动的方式去开发一个应用程序。但是如果全部在Watcher中做控制这样需要写很多重复性的控制视图的代码。 这样显然是很麻烦的，MVVM的核心是在MVC的基础上将view的状态行为抽象化。 在Vue中模板就是用来声明我们应用程序的数据与界面的绑定关系。 模板的编译在Vue中模板不仅可以做到绑定数据还可以做到诸如循环判断等复杂功能，因此一定是一个图灵完备的语言去实现而不是html，它只是一种接近html的写法。 在Javascript中模板本质上也就是字符串，因此在Vue的运行过程中还需要将我们的模板字符串转换成DOM节点，并在这个过程中实现与我们数据的绑定。 模板的编译分为三个阶段：transclude阶段、compile阶段、linker阶段 transclude阶段stringToFragment1234567891011121314151617181920212223const tagRE = /&lt;([\\w:-]+)/const entityRE = /&amp;#?\\w+?;/const commentRE = /&lt;!--/function stringToFragment (templateString) &#123; var frag = document.createDocumentFragment() var tagMatch = templateString.match(tagRE) var entityMatch = entityRE.test(templateString) var commentMatch = commentRE.test(templateString) if (!tagMatch &amp;&amp; !entityMatch &amp;&amp; !commentMatch) &#123; // text only, return a single text node. frag.appendChild( document.createTextNode(templateString) ) &#125; else &#123; var tag = tagMatch &amp;&amp; tagMatch[1] var node = document.createElement('div') node.innerHTML = templateString frag.appendChild(child) &#125; return frag&#125; 查看DEMO compile阶段","categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"}]},{"title":"（三）Watcher依赖数据的对象","slug":"vue深入理解/Watcher依赖数据的对象","date":"2020-04-26T09:58:52.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/26/vue深入理解/Watcher依赖数据的对象/","link":"","permalink":"https://eagune.github.io/2020/04/26/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Watcher%E4%BE%9D%E8%B5%96%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"Watcher当我们侦测到数据变化的时候，需要对不同的情况进行不同的处理，显然我们不能都放在setter中，因此我们需要抽象出一个能集中处理这种情况的类。 12345678910111213141516171819class Watcher &#123; constructor(vm, key, cb) &#123; this.vm = vm; this.key = key; this.cb = cb; window.target = this; this.value = this.vm[this.key]; window.target = undefined; this.cb.call(this.vm, this.value); &#125; update() &#123; const oldValue = this.value; this.value = this.vm[this.key]; this.cb.call(this.vm, this.value, oldValue); &#125;&#125; 由于我们在getter中无法获取到调用它的对象，因此我们通过将Watcher挂载到全局对象的方法，在建立依赖关系的时候我们先将Watcher挂载到全局对象上，然后取值触发getter方法，这样在getter方法中就能将依赖的对象收集起来。 12345678910111213141516171819202122function defineReactive(data, key, value) &#123; let deps = []; Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if(window.target) &#123; deps.push(window.target); &#125; return value; &#125;, set: function(newVal) &#123; if (value === newVal) &#123; return; &#125; value = newVal; for (let i = 0; i &lt; deps.length; i++) &#123; deps[i].update(); &#125; &#125; &#125;);&#125; 查看DEMO 对于数组类型的触发我们对数组的侦测是通过拦截器进行的，因此他们发出通知的位置也是在拦截器中进行。由于需要在拦截器中访问到Watcher，因此我们要将依赖对象放到Observer中。我们改造一下Observer，当处理数组的时候，我们给数组添加一个__ob__属性指向我们这个Observer。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Observer &#123; constructor(value) &#123; this.value = value; if (!Array.isArray(value)) &#123; this.walk(value); &#125; else &#123; this.deps = []; let instance = this; Object.defineProperty(value, '__ob__', &#123; value: instance, enumerable: false, writable: true, configurable: true, &#125;); value.__proto__ = arrayMethods; &#125; &#125; walk(object) &#123; ... &#125;&#125;const arrayProto = Array.prototype;const arrayMethods = Object.create(arrayProto);[ 'push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function(method) &#123; const original = arrayProto[method]; Object.defineProperty(arrayMethods, method, &#123; value: function mutator(...args) &#123; const result = original.apply(this, args); let deps = this.__ob__.deps; for (let i = 0; i &lt; deps.length; i++) &#123; deps[i].update(); &#125; return result; &#125;, enumerable: false, writable: true, configurable: true, &#125;)&#125;) 虽然我们触发Watcher是在拦截器中，但是我们收集依赖还是在getter中的，而我们保存在observer中，因此我们还需要对收集依赖的地方进行改造。 1234567891011121314151617181920212223242526272829303132function defineReactive(data, key, value) &#123; let instance; if (typeof value === 'object') &#123; instance = new Observer(value); &#125; let deps = []; Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if(window.target) &#123; deps.push(window.target); if(instance &amp;&amp; instance.deps) &#123; instance.deps.push(window.target); &#125; &#125; return value; &#125;, set: function(newVal) &#123; if (value === newVal) &#123; return; &#125; value = newVal; for (let i = 0; i &lt; deps.length; i++) &#123; deps[i].update(); &#125; if (typeof value === 'object') &#123; new Observer(value); &#125; &#125; &#125;);&#125; 查看DEMO parsePath让Watcher支持复杂的层级当对于更复杂的层级属性进行监听时（比如我们想侦测到data.a.b.c的时候），上面的方法显然是不够用的。因此我们需要对上面的方法进行升级。 123456789101112131415161718192021222324252627282930function parsePath(path) &#123; const segments = path.split('.') //闭包保存层级数组 return function(obj) &#123; for (let i = 0; i &lt; segments.length; i++) &#123; if (!obj) return; obj = obj[segments[i]]; &#125; return obj; &#125;&#125;class Watcher &#123; constructor(vm, expression, cb) &#123; this.vm = vm; this.getter = parsePath(expression); this.cb = cb; window.target = this; this.value = this.getter.call(this.vm); window.target = undefined; this.cb.call(this.vm, this.value); &#125; update() &#123; const oldValue = this.value; this.value = this.vm[this.key]; this.cb.call(this.vm, this.value, oldValue); &#125;&#125; 查看DEMO","categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"},{"name":"Watcher","slug":"Watcher","permalink":"https://eagune.github.io/tags/Watcher/"}]},{"title":"（四）Dep依赖收集","slug":"vue深入理解/Dep依赖收集","date":"2020-04-25T13:33:50.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/25/vue深入理解/Dep依赖收集/","link":"","permalink":"https://eagune.github.io/2020/04/25/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Dep%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86/","excerpt":"","text":"封装Dep我们可以将defineReactive中收集依赖，通知依赖的命令式代码封装一下。 1234567891011121314151617class Dep &#123; constructor(value) &#123; this.subs = []; &#125; depend() &#123; if (window.target) &#123; this.subs.push(window.target); &#125; &#125; notify() &#123; this.subs.forEach(sub =&gt; &#123; sub.update(); &#125;) &#125;&#125; 在defineReactive中使用Dep123456789101112131415161718192021222324function defineReactive(data, key, value) &#123; if (typeof value === 'object') &#123; new Observer(value); &#125; let dep = new Dep(); Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; dep.depend(); //新增 return value; &#125;, set: function(newVal) &#123; if (value === newVal) &#123; return; &#125; value = newVal; if (typeof value === 'object') &#123; new Observer(value); &#125; dep.notify(); //通知 &#125; &#125;);&#125; 查看DEMO","categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"},{"name":"Dep","slug":"Dep","permalink":"https://eagune.github.io/tags/Dep/"}]},{"title":"（二）Observer将数据对象变成响应式","slug":"vue深入理解/Observer将数据对象变成响应式","date":"2020-04-25T09:43:39.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/25/vue深入理解/Observer将数据对象变成响应式/","link":"","permalink":"https://eagune.github.io/2020/04/25/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Observer%E5%B0%86%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E5%8F%98%E6%88%90%E5%93%8D%E5%BA%94%E5%BC%8F/","excerpt":"","text":"Observer我们已经知道了变化侦测的原理了，并且知道了Object和Array的不同，现在我们封装一个Observer类，将一个数据对象中的所有属性都进行追踪。 123456789101112131415161718192021222324252627282930313233343536373839class Observer &#123; constructor(value) &#123; this.value = value; if (!Array.isArray(value)) &#123; this.walk(value); &#125; else &#123; value.__proto__ = arrayMethods; &#125; &#125; walk(object) &#123; for (let key in object) &#123; defineReactive(object, key, object[key]); &#125; &#125;&#125;function defineReactive(data, key, value) &#123; if (typeof value === 'object') &#123; new Observer(value); &#125; Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; return value; &#125;, set: function(newVal) &#123; if (value === newVal) &#123; return; &#125; value = newVal; if (typeof value === 'object') &#123; new Observer(value); &#125; &#125; &#125;);&#125; 查看DEMO","categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"},{"name":"Observer","slug":"Observer","permalink":"https://eagune.github.io/tags/Observer/"}]},{"title":"（一）Vue中的变化侦测的原理","slug":"vue深入理解/Vue中的变化侦测的原理","date":"2020-04-24T19:16:26.000Z","updated":"2020-05-04T03:03:56.624Z","comments":true,"path":"2020/04/24/vue深入理解/Vue中的变化侦测的原理/","link":"","permalink":"https://eagune.github.io/2020/04/24/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Vue%E4%B8%AD%E7%9A%84%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E7%9A%84%E5%8E%9F%E7%90%86/","excerpt":"","text":"变化侦测是Vue中实现响应式的核心。它的作用是当数据变化时，通知视图进行相应的更新。 Object的变化侦测在javascript中有两种方法可以侦测到一个对象的变化：Object.defineProperty和ES6的Proxy。 12345678910111213function defineReactive(obj, property, value) &#123; Object.defineProperty(obj, property, &#123; enumerable: true, configurable: true, get: function() &#123; return value; &#125;, set: function(newValue) &#123; if (newValue === value) return value = newValue; &#125;, &#125;)&#125; 查看DEMO Array的变化侦测在对Object进行变化侦测的时候是使用getter/setter的方式来进行追踪。而用push等方法来改变数组中的内容时并不会出发setter。因此我们采用拦截器的方式覆盖Array.prototype来对数组进行追踪。 123456789101112131415161718192021const arrayProto = Array.prototype;const arrayMethods = Object.create(arrayProto);[ 'push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function(method) &#123; const original = arrayProto[method]; Object.defineProperty(arrayMethods, method, &#123; value: function mutator(...args) &#123;//使用rest参数可以避免将argumesnts对象转换为数组 return original.apply(this, args) &#125;, enumerable: false, //不让方法出现在枚举属性中 writable: true, configurable: true, &#125;)&#125;) 查看DEMO","categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"},{"name":"变化侦测","slug":"变化侦测","permalink":"https://eagune.github.io/tags/%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B/"}]}],"categories":[{"name":"vue深入理解","slug":"vue深入理解","permalink":"https://eagune.github.io/categories/vue%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://eagune.github.io/tags/vue/"},{"name":"Watcher","slug":"Watcher","permalink":"https://eagune.github.io/tags/Watcher/"},{"name":"Dep","slug":"Dep","permalink":"https://eagune.github.io/tags/Dep/"},{"name":"Observer","slug":"Observer","permalink":"https://eagune.github.io/tags/Observer/"},{"name":"变化侦测","slug":"变化侦测","permalink":"https://eagune.github.io/tags/%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B/"}]}